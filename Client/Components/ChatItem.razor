<div @onclick="@OpenChat" class="chat-item-wrapper @color">
    <div class="avatar-wrapper">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
             viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="avatar-loader @loader_hidden"><Loader /></svg>
        <img @onload="@Loaded" class="avatar" src=@avatar/>
    </div>
    <div class="data">
        <div class="companion">@chat.companion.name</div>
        @if (chat.messages.Count > 0 && chat.messages.Last() != null)
        {
            <div class="date">@chat.messages.Last().date.ToString("HH:mm")</div>
            <div class="text">@chat.messages.Last().text</div>
        }
        else
        {
            <div class="text">no messages yet</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Chat chat { get; set; }
    public int news;
    public string color = "just-msg";
    public string newMsg = "new-msg";
    public string justMsg = "just-msg";
    public string current = "current-chat";
    string avatar = "";

    string hidden = "hidden";
    string loader_hidden = "";
    string avatar_hidden = "hidden";

    void OpenChat()
    {
        color = justMsg;
        Global.InvokeOnChatClicked(chat, avatar);
    }

    protected override async void OnParametersSet()
    {
        if (chat.messages.Any(x => !x.is_read))
            color = newMsg;
    }

    protected override async Task OnInitializedAsync()
    {
        avatar = await Http.GetStringAsync("api/photo/" + chat.companion.address);
        StateHasChanged();
    }

    void Loaded()
    {
        loader_hidden = hidden;
        StateHasChanged();
    }
}
