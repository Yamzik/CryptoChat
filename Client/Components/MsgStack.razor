<div class="msg-stack-wrapper">
    <div class="companion-wrapper">
        <div class="btn-back hidden" @onclick="@Close"><SvgBack /></div>
        <div class="avatar-wrapper"><img class="avatar" src=@avatar /></div>
        @if (chat != null &&
        chat.companion != null &&
        chat.companion.address != "")
        {
            <div class="chat-title">@(chat?.companion?.address.Substring(0, 6) + "...")</div>
        }
        else
        {
            <div class="chat-title">no dialogue yet</div>
        }
    </div>
    <div class="messages">
        @for (int i = 0; i < Global.currentChat.messages.Count; i++)
        {
            Message msg = Global.currentChat.messages[i];
            MsgBase mes = new MsgBase { message = msg };
            msgs.Add(mes);
            switch (mes.message.route)
            {
                case MsgRoute.income:
                    <MsgIn @ref=mes message=@mes.message />
                    break;
                case MsgRoute.outcome:
                    <MsgOut @ref=mes message=@mes.message />
                    break;
            }
        }
    </div>
</div>

@code {
    public List<MsgBase> msgs { get; set; } = new List<MsgBase>();
    public Chat chat;
    string avatar = "";
    protected override void OnInitialized()
    {
        Global.OnMessageSent += (message) => StateHasChanged();
        Global.OnChatClicked += (_chat, _avatar) => { chat = _chat; avatar = _avatar; StateHasChanged(); };
        Global.OnMessageReceived += (ch, msg) => { if (ch.companion.address == chat.companion.address) StateHasChanged(); };
    }
    public void Close() => Chatter.InvokeClosed();
}
